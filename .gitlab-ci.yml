stages:
  - build
  - validate

variables:
  IMAGE_NAME: "test-app"
  IMAGE_TAG: "latest"
  LBL_IMAGE_TIER: "1"
  ARTIFACTORY_URL: "artifactory"
  ARTIFACTORY_USER: "me"
  # ARTIFACTORY_PASSWORD: "your_password" # deployed via GitLab CI/CD secret

build_image:
  stage: build
  script:
    - echo "Building Docker image with docker..."
    - docker build --build-arg GITLAB_REPO_URL=$CI_PROJECT_URL --build-arg LBL_IMAGE_TIER=$LBL_IMAGE_TIER -t ${IMAGE_NAME}:${IMAGE_TAG} .
    - echo "Saving Docker image as artifact..."
    - docker save ${IMAGE_NAME}:${IMAGE_TAG} -o ${IMAGE_NAME}_${IMAGE_TAG}.tar
    - echo "Image built and saved successfully!"
    - docker images | grep ${IMAGE_NAME}
  artifacts:
    paths:
      - ${IMAGE_NAME}_${IMAGE_TAG}.tar
    expire_in: 1 day
  only:
    - main
    - merge_requests
  tags:
    - docker

test_image:
  stage: validate
  script:
    - echo "Testing the built image..."
    - |
      CONTAINER_ID=$(docker run -d ${IMAGE_NAME}:${IMAGE_TAG})
      echo "Container started with ID: $CONTAINER_ID"
      echo "Waiting 15 seconds to capture logs..."
      sleep 15
      echo "Container logs:"
      docker logs $CONTAINER_ID
      echo "Stopping and removing container..."
      docker stop $CONTAINER_ID
      docker rm $CONTAINER_ID
      echo "Container test completed!"
  dependencies:
    - build_image
  only:
    - main
    - merge_requests
  tags:
    - docker

scan_image:
  stage: validate
  dependencies:
    - build_image
  script:
    - docker load -i ${IMAGE_NAME}_${IMAGE_TAG}.tar
    - trivy image --exit-code 1 --severity HIGH,CRITICAL ${IMAGE_NAME}:${IMAGE_TAG}
  allow_failure: true

  push_image:
    stage: validate
    dependencies:
      - build_image
      - test_image
      - scan_image
    script:
      - echo "Logging in to local Artifactory Docker registry..."
      - docker login ${ARTIFACTORY_URL}:5000 -u $ARTIFACTORY_USER -p $ARTIFACTORY_PASSWORD
      - echo "Tagging image for Artifactory..."
      - docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${ARTIFACTORY_URL}:5000/${IMAGE_NAME}:${IMAGE_TAG}
      - echo "Pushing image to Artifactory..."
      - docker push ${ARTIFACTORY_URL}:5000/${IMAGE_NAME}:${IMAGE_TAG}
      - echo "Image pushed successfully!"
    only:
      - main
      - merge_requests
    tags:
      - docker

  # cleanup_artifacts:
  #   stage: cleanup
  #   script:
  #     - echo "Cleaning up image artifact..."
  #     - rm -f ${IMAGE_NAME}_${IMAGE_TAG}.tar
  #     - echo "Cleanup completed!"
  #   dependencies:
  #     - build_image
  #   when: always
  #   only:
  #     - main
  #     - merge_requests
  #   tags:
  #     - docker