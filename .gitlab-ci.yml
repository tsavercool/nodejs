stages:
  - build
  - validate

variables:
  IMAGE_NAME: "test-app"
  IMAGE_TAG: "latest"

build_image:
  stage: build
  script:
    - echo "Building Docker image with docker..."
    - docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
    - echo "Saving Docker image as artifact..."
    - docker save ${IMAGE_NAME}:${IMAGE_TAG} -o ${IMAGE_NAME}_${IMAGE_TAG}.tar
    - echo "Image built and saved successfully!"
    - docker images | grep ${IMAGE_NAME}
  artifacts:
    paths:
      - ${IMAGE_NAME}_${IMAGE_TAG}.tar
    expire_in: 1 day
  only:
    - main
    - merge_requests
  tags:
    - docker

test_image:
  stage: validate
  script:
    - echo "Testing the built image..."
    - |
      CONTAINER_ID=$(docker run -d ${IMAGE_NAME}:${IMAGE_TAG})
      echo "Container started with ID: $CONTAINER_ID"
      echo "Waiting 15 seconds to capture logs..."
      sleep 15
      echo "Container logs:"
      docker logs $CONTAINER_ID
      echo "Stopping and removing container..."
      docker stop $CONTAINER_ID
      docker rm $CONTAINER_ID
      echo "Container test completed!"
  dependencies:
    - build_image
  only:
    - main
    - merge_requests
  tags:
    - docker

scan_image:
  stage: validate
  dependencies:
    - build_image
  script:
    - docker load -i ${IMAGE_NAME}_${IMAGE_TAG}.tar
    - trivy image --exit-code 1 --severity HIGH,CRITICAL ${IMAGE_NAME}:${IMAGE_TAG}
  allow_failure: true

  cleanup_artifacts:
    stage: cleanup
    script:
      - echo "Cleaning up image artifact..."
      - rm -f ${IMAGE_NAME}_${IMAGE_TAG}.tar
      - echo "Cleanup completed!"
    dependencies:
      - build_image
    when: always
    only:
      - main
      - merge_requests
    tags:
      - docker